import requests
import base64
import os
import cv2
import numpy as np
from datetime import datetime
import time
import threading
from skimage.metrics import structural_similarity as ssim

# C·∫•u h√¨nh ThingsBoard
THINGSBOARD_HOST = "app.coreiot.io"  # Thay b·∫±ng hostname c·ªßa b·∫°n
ACCESS_TOKEN = "your_access_token"  # Thay b·∫±ng access token c·ªßa b·∫°n
THINGSBOARD_URL_IMAGE = f"http://{THINGSBOARD_HOST}/api/v1/{ACCESS_TOKEN}/attributes?clientKeys=image"
HEADERS = {'Content-Type': 'application/json'}

# Th∆∞ m·ª•c l∆∞u ·∫£nh nh·∫≠n ƒë∆∞·ª£c
SAVE_DIR = "received_images"
os.makedirs(SAVE_DIR, exist_ok=True)

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u ·∫£nh tr∆∞·ªõc ƒë√≥
last_image = None  
stop_event = threading.Event()  # Bi·∫øn d·ª´ng thread

def compare_images(img1, img2):
    """So s√°nh hai ·∫£nh b·∫±ng SSIM, tr·∫£ v·ªÅ ƒë·ªô t∆∞∆°ng ƒë·ªìng."""
    gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
    gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
    similarity, _ = ssim(gray1, gray2, full=True)
    return similarity * 10  # Nh√¢n 10 ƒë·ªÉ ƒë∆∞a v·ªÅ thang ƒëo 0-10

def save_image(img):
    """L∆∞u ·∫£nh v√†o th∆∞ m·ª•c v√† c·∫≠p nh·∫≠t ·∫£nh cu·ªëi c√πng."""
    global last_image
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = os.path.join(SAVE_DIR, f"mypic.jpg")
    cv2.imwrite(filename, img)
    last_image = img  # C·∫≠p nh·∫≠t ·∫£nh m·ªõi nh·∫•t
    print(f"·∫¢nh ƒë√£ ƒë∆∞·ª£c l∆∞u: {filename}")

def get_image_from_thingsboard():
    """Thread th·ª±c hi·ªán HTTP GET ƒë·ªÉ l·∫•y ·∫£nh t·ª´ ThingsBoard."""
    global last_image

    while not stop_event.is_set():
        try:
            print("üì° G·ª≠i y√™u c·∫ßu l·∫•y ·∫£nh t·ª´ ThingsBoard...")
            response = requests.get(THINGSBOARD_URL_IMAGE, headers=HEADERS, timeout=10)  # Ch·ªù t·ªëi ƒëa 10 gi√¢y
            if response.status_code == 200:
                json_obj = response.json()

                # Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c c√≥ ch·ª©a ·∫£nh kh√¥ng
                if "client" in json_obj and "image" in json_obj["client"]:
                    img_data = base64.b64decode(json_obj["client"]["image"])
                    np_img = np.frombuffer(img_data, dtype=np.uint8)
                    img = cv2.imdecode(np_img, cv2.IMREAD_COLOR)

                    if img is not None:
                        # # N·∫øu c√≥ ·∫£nh tr∆∞·ªõc ƒë√≥, ki·ªÉm tra ƒë·ªô t∆∞∆°ng ƒë·ªìng
                        # if last_image is not None:
                        #     similarity_score = compare_images(last_image, img)
                        #     print(f"üîç ƒê·ªô t∆∞∆°ng ƒë·ªìng v·ªõi ·∫£nh tr∆∞·ªõc: {similarity_score:.2f}")

                        #     if similarity_score > 8:
                        #         print("‚ö†Ô∏è B·ªè qua ·∫£nh v√¨ qu√° gi·ªëng ·∫£nh tr∆∞·ªõc!")
                        #         continue
                        
                        # N·∫øu ·∫£nh h·ª£p l·ªá, l∆∞u l·∫°i
                        save_image(img)
                    else:
                        print("L·ªói gi·∫£i m√£ ·∫£nh!")
                else:
                    print("Kh√¥ng c√≥ ·∫£nh m·ªõi t·ª´ ThingsBoard!")

            else:
                print(f"L·ªói HTTP: {response.status_code}")

        except requests.exceptions.RequestException as e:
            print(f"L·ªói k·∫øt n·ªëi: {e}")

        print("ƒêang ch·ªù c·∫≠p nh·∫≠t ti·∫øp theo...")
        time.sleep(1)  # Ch·ªù tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu ti·∫øp theo

# T·∫°o v√† kh·ªüi ch·∫°y thread HTTP subscriber
http_thread = threading.Thread(target=get_image_from_thingsboard, daemon=True)
http_thread.start()

# Ch∆∞∆°ng tr√¨nh ch√≠nh ch·∫°y song song
try:
    while True:
        print("‚åõ Ch∆∞∆°ng tr√¨nh ch√≠nh v·∫´n ƒëang ch·∫°y...")
        time.sleep(5)  # Hi·ªÉn th·ªã tr·∫°ng th√°i m·ªói 10 gi√¢y

except KeyboardInterrupt:
    print("D·ª´ng ch∆∞∆°ng tr√¨nh...")
    stop_event.set()  # G·ª≠i t√≠n hi·ªáu d·ª´ng thread
    http_thread.join()  # Ch·ªù thread k·∫øt th√∫c
    print("ƒê√£ tho√°t ho√†n to√†n.")
